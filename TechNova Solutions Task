//Task 1: Basic Lead Capture and Scoring
//Define Lead Scoring Criteria:

def calculate_lead_score(data):
    company_size_points = {
        "1-50 employees": 10,
        "51-200 employees": 20,
        "201-1000 employees": 30,
        "1000+ employees": 40
    }
    budget_points = {
        "Less than $10,000": 10,
        "$10,000 - $50,000": 20,
        "$50,001 - $100,000": 30,
        "More than $100,000": 40
    }
    industry_points = {
        "Technology": 30,
        "Finance": 25,
        "Healthcare": 20,
        "Retail": 15,
        "Other": 10
    }
    urgency_points = {
        "Immediate (within 1 month)": 40,
        "Short-term (1-3 months)": 30,
        "Medium-term (3-6 months)": 20,
        "Long-term (6+ months)": 10
    }

    score = (company_size_points.get(data['company_size'], 0) +
             budget_points.get(data['annual_budget'], 0) +
             industry_points.get(data['industry'], 0) +
             urgency_points.get(data['urgency'], 0))
    return score

//Capture Form Data: Simulate form data submission.

form_data = {
    "company_size": "51-200 employees",
    "annual_budget": "$10,000 - $50,000",
    "industry": "Technology",
    "urgency": "Immediate (within 1 month)"
}


//Integrate Google Sheets: Use the Google Sheets API to save the data and score.

from googleapiclient.discovery import build
from google.oauth2 import service_account

def append_to_google_sheet(spreadsheet_id, range_name, values):
    creds = service_account.Credentials.from_service_account_file(
        'path_to_credentials.json',
        scopes=['https://www.googleapis.com/auth/spreadsheets'])
    service = build('sheets', 'v4', credentials=creds)

    body = {"values": [values]}
    result = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range=range_name,
        valueInputOption="RAW",
        body=body
    ).execute()

    return result

# Save lead data to Google Sheets
score = calculate_lead_score(form_data)
sheet_id = "your_google_sheet_id"
if score > 70:
    append_to_google_sheet(sheet_id, "High Value Leads", list(form_data.values()) + [score])
else:
    append_to_google_sheet(sheet_id, "Nurturing Leads", list(form_data.values()) + [score])


//Send Emails Based on Score: Use smtplib to send emails.

import smtplib
from email.mime.text import MIMEText

def send_email(to_email, subject, body):
    smtp_server = "smtp.gmail.com"
    port = 587
    sender_email = "your_email@gmail.com"
    password = "your_password"

    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = to_email

    with smtplib.SMTP(smtp_server, port) as server:
        server.starttls()
        server.login(sender_email, password)
        server.sendmail(sender_email, to_email, msg.as_string())

# Example
if score > 70:
    send_email("lead_email@example.com", "Welcome to TechNova!", "Thank you for showing interest!")




//Task 2: Handling Edge Cases
//Handle Incomplete Data: Check for missing fields and log them.

def validate_form_data(data):
    required_fields = ['company_size', 'annual_budget', 'industry', 'urgency']
    missing_fields = [field for field in required_fields if field not in data or not data[field]]
    if missing_fields:
        print(f"Incomplete data: Missing {missing_fields}")
        # Log incomplete data
        with open("incomplete_leads.csv", "a") as file:
            file.write(f"{data}, Missing: {missing_fields}\n")
        return False
    return True


//High-Value Lead Notifications: Query and notify for scores above a threshold.

def notify_sales_team(data):
    print("Notifying sales team for high-value lead:", data)
    send_email("sales_team@example.com", "New High-Value Lead", str(data))

//Accommodate Different Time Zones: Adjust reminders based on the lead's time zone.

from datetime import datetime
import pytz

def adjust_to_timezone(time_zone):
    local_time = datetime.now(pytz.timezone(time_zone))
    print("Adjusted time:", local_time)
    return local_time

//Task 3: Scaling and Advanced Implementation
//Lead Distribution: Assign leads evenly among sales reps.

sales_reps = ["Alice", "Bob", "Charlie"]
def assign_sales_rep(lead_id):
    return sales_reps[lead_id % len(sales_reps)]

//Keyword Extraction: Parse comments using Python.

def extract_keywords(comments):
    keywords = ["integration", "pricing", "support", "demo"]
    found_keywords = [kw for kw in keywords if kw in comments.lower()]
    return found_keywords

//Schedule Follow-Up in Google Calendar: Use Google Calendar API.

def schedule_follow_up(lead, follow_up_time):
    service = build('calendar', 'v3', credentials=creds)
    event = {
        'summary': 'Follow-Up with Lead',
        'description': f"Details: {lead}",
        'start': {'dateTime': follow_up_time, 'timeZone': 'UTC'},
        'end': {'dateTime': follow_up_time, 'timeZone': 'UTC'}
    }
    service.events().insert(calendarId='primary', body=event).execute()


//Deliverables
//Python Script: Automates lead capture, scoring, and actions.
//Google Sheets Integration: Saves leads and scores in categorized sheets.
//Email Automation: Sends personalized messages based on lead scores.
//Google Calendar: Schedules reminders for high-priority follow-ups.
